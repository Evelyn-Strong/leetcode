package com.eve.leetcode.competition;

import java.util.LinkedList;
import java.util.List;

/**
 * Created by Eve on 2022/9/25.
 */
public class _20220925_shence {

    public String[] sortPeople(String[] names, int[] heights) {
        int len = heights.length;

        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (heights[i] < heights[j]) {
                    int tmp = heights[j];
                    heights[j] = heights[i];
                    heights[i] = tmp;

                    String ntmp = names[j];
                    names[j] = names[i];
                    names[i] = ntmp;
                }
            }
        }

        return names;
    }


    public static int longestSubarray(int[] nums) {
        int max = nums[0];
        int index = 0;
        int len = nums.length;
        int ans = 0;
        if (len == 1) return 1;

        for (int i = 0; i < len; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }

        while (index < len) {

            if (max == nums[index]) {
                int count = 0;
                while (index < len && max == nums[index]) {
                    index++;
                    count++;
                }
                ans = Math.max(count, ans);
            } else {
                index++;
            }

        }

        return ans;

    }


    public static List<Integer> goodIndices(int[] nums, int k) {
        int len = nums.length;
        List<Integer> ans = new LinkedList<>();
        if (k * 2 + 1 > len) return ans;

        if (k == 1) {
            for (int i = 1; i < len - 1; i++) {
                ans.add(i);
            }
            return ans;
        }

        for (int i = k; i < len - k; i++) {
            if (nums[i - 1] <= nums[i - 2] && nums[i + 1] <= nums[i + 2]) {
                if (isValid(nums, i, k)) ans.add(i);
            }
            if ((i + k + 1) < len && nums[i + k + 1] < nums[i + k]) {
                i = i + 2 * k - 3;
                continue;
            }
            if (nums[i] > nums[i - 1]) {
                i = i + k - 1;
                continue;
            }

        }
        return ans;
    }

    private static boolean isValid(int[] nums, int i, int k) {
        int left = i - 1;
        int right = i + 1;
        while (k > 1 && nums[left] <= nums[--left] && nums[right] <= nums[++right]) {
            k--;
        }
        return k == 1 ? true : false;
    }


    public static void main(String[] args) {
        //System.out.println(goodIndices(new int[]{2, 1, 1, 1, 3, 4, 1}, 2));

        System.out.println(goodIndices(new int[]{223468, 75633, 12954, 5552, 2767, 1244, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 976045, 266790, 616960, 860083, 921352, 969312, 976927, 977965, 988878, 999715, 999824, 999878, 999949, 999964, 999964, 999990, 999993, 999998, 999999, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000}, 16));
        //System.out.println(1 & 3);
        //System.out.println(longestSubarray(new int[]{}));
    }
}
